basePath: /
definitions:
  model.User:
    properties:
      created_id:
        type: string
      email:
        type: string
      id:
        type: integer
      updated_id:
        type: string
      userInfo:
        $ref: '#/definitions/model.UserInfo'
        description: hasOne
        type: object
      username:
        type: string
    type: object
  model.UserInfo:
    properties:
      avatar:
        type: string
      country:
        type: string
      created_id:
        type: string
      id:
        type: integer
      institution:
        type: string
      name:
        type: string
      updated_id:
        type: string
    type: object
  request.LoginRequest:
    properties:
      password:
        example: strong_password
        type: string
      username:
        example: user_123
        type: string
    required:
    - password
    - username
    type: object
  response.ApiResponse:
    properties:
      data:
        type: object
      error:
        type: integer
      message:
        type: string
    type: object
  response.LoginData:
    properties:
      expiry:
        type: integer
      token:
        type: string
    type: object
  response.LoginResponse:
    properties:
      data:
        $ref: '#/definitions/response.LoginData'
        type: object
      error:
        type: integer
      message:
        type: string
    type: object
  response.UserResponse:
    properties:
      data:
        $ref: '#/definitions/model.User'
        type: object
      error:
        type: integer
      message:
        type: string
    type: object
host: localhost:3000
info:
  contact:
    email: rafikfarhad@gmail.com
    name: Hoax Support
  description: A ready eco-system to build web app faster on the go
  license: {}
  title: Hoax
  version: "1.0"
paths:
  /api/v1/login:
    post:
      consumes:
      - application/json
      description: Login via username and password
      parameters:
      - description: raw json body
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ApiResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.ApiResponse'
      summary: Login API
      tags:
      - Auth
  /api/v1/me:
    get:
      consumes:
      - application/json
      description: Get auth user info
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ApiResponse'
      security:
      - JWT: []
      summary: Me API
      tags:
      - Auth
securityDefinitions:
  JWT:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
